
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Sun Nov 20 2022 21:39:20 GMT+0900 (日本標準時)
 * Suite: TodoMVC
 */

var nVer = process.version.match( /^v(\d+)/ );
if ( !nVer || nVer[ 1 ] < 9 ) {
  console.error( "WARNING: You have an outdated Node.js version " + process.version
    + ". You need at least v.9.x to run this test suite." );
}


const {
        bs, util, fetch, localStorage
      } = require( "../lib/bootstrap" )( "TodoMVC" ),
      puppeteerOptions = require( "../puppeteer.config.json" ),
      devices = require( "puppeteer" ).devices,
      fs = require( "fs" ),
      path = require( "path" ),
      os = require( "os" );




jest.setTimeout( 50000 );

let consoleLog = [], // assetConsoleMessage
    dialogLog = []; // assertDialog;

bs.TARGETS = {};

// Environment variables
let ENV = {
  "SANDBOX_BASEURL": "https://puppetry.app/demo/"
};

bs.TARGETS[ "FIRSTNAME_INPUT" ] = async () => await bs.query( "#fname", true, "FIRSTNAME_INPUT" );
bs.TARGETS[ "LASTNAME_INPUT" ] = async () => await bs.query( "#lname", true, "LASTNAME_INPUT" );
bs.TARGETS[ "MESSAGE_INPUT" ] = async () => await bs.query( "#comment", true, "MESSAGE_INPUT" );
bs.TARGETS[ "CONSENT_CHECKBOX" ] = async () => await bs.query( "#consent", true, "CONSENT_CHECKBOX" );
bs.TARGETS[ "OPTION_RADIO_1" ] = async () => await bs.query( "#option1", true, "OPTION_RADIO_1" );
bs.TARGETS[ "ATTACHMENT_FILE" ] = async () => await bs.query( "#attachment", true, "ATTACHMENT_FILE" );
bs.TARGETS[ "FORM" ] = async () => await bs.query( "#form", true, "FORM" );
bs.TARGETS[ "SUBMIT_BTN" ] = async () => await bs.query( "#submit", true, "SUBMIT_BTN" );
bs.TARGETS[ "HEADER" ] = async () => await bs.query( " .todoapp .header", true, "HEADER" );
bs.TARGETS[ "NEWTODO_INPUT" ] = async () => await bs.query( " .todoapp .header input.new-todo", true, "NEWTODO_INPUT" );
bs.TARGETS[ "MAIN" ] = async () => await bs.query( ".todoapp > div > .main", true, "MAIN" );
bs.TARGETS[ "FOOTER" ] = async () => await bs.query( " .todoapp .footer", true, "FOOTER" );
bs.TARGETS[ "TOGGLE_ALL" ] = async () => await bs.query( " .todoapp label[for=\"toggle-all\"]", true, "TOGGLE_ALL" );
bs.TARGETS[ "TODO_LIST_LI1_TOGGLE" ] = async () => await bs.query( " .todoapp .todo-list > li:nth-child(1) .view > input.toggle", true, "TODO_LIST_LI1_TOGGLE" );
bs.TARGETS[ "TODO_LIST_LI1_VIEW" ] = async () => await bs.query( ".todoapp .todo-list > li:nth-child(1) .view", true, "TODO_LIST_LI1_VIEW" );
bs.TARGETS[ "TODO_LIST_LI1_EDIT" ] = async () => await bs.query( ".todoapp .todo-list > li:nth-child(1) input.edit", true, "TODO_LIST_LI1_EDIT" );
bs.TARGETS[ "TODO_LIST_LI1_LABEL" ] = async () => await bs.query( ".todoapp .todo-list > li:nth-child(1) .view > label", true, "TODO_LIST_LI1_LABEL" );
bs.TARGETS[ "TODO_LIST_LI1_REMOVE" ] = async () => await bs.query( " .todoapp .todo-list > li:nth-child(1) .view > .destroy", true, "TODO_LIST_LI1_REMOVE" );
bs.TARGETS[ "TODO_LIST_LI2_TOGGLE" ] = async () => await bs.query( " .todoapp .todo-list > li:nth-child(2) .view > input.toggle", true, "TODO_LIST_LI2_TOGGLE" );
bs.TARGETS[ "TODO_COUNT" ] = async () => await bs.query( ".todoapp .footer .todo-count > strong", true, "TODO_COUNT" );
bs.TARGETS[ "TODO_FILTER_ALL" ] = async () => await bs.query( "  .todoapp .footer .filters > li:nth-of-type(1) > a", true, "TODO_FILTER_ALL" );
bs.TARGETS[ "TODO_FILTER_ACTIVE" ] = async () => await bs.query( "  .todoapp .footer .filters > li:nth-of-type(2) > a", true, "TODO_FILTER_ACTIVE" );
bs.TARGETS[ "TODO_FILTER_COMPLETED" ] = async () => await bs.query( "  .todoapp .footer .filters > li:nth-of-type(3) > a", true, "TODO_FILTER_COMPLETED" );
bs.TARGETS[ "CLEAR_COMPLETED" ] = async () => await bs.query( ".todoapp .footer button.clear-completed", true, "CLEAR_COMPLETED" );

describe( "TodoMVC", () => {
  beforeAll(async () => {
    await bs.setup( puppeteerOptions, {"allure":false,"requireInterceptTraffic":true});
    await util.once(async () => {
      bs.browser && console.log( "BROWSER: ", await bs.browser.version() );
      await util.savePuppetterInfo( bs );
    });

    bs.page.on( "console", ( message ) => consoleLog.push( message ) );
    bs.page.on( "dialog", ( dialog ) => dialogLog.push( dialog ) );

    
    bs.performance.watchTraffic();

    
  });

  afterAll(async () => {

    await bs.teardown();
  });


  describe( "Functionality", () => {

    test( "No todos {bx4k266ygz0}", async () => {
      let result, assert, searchStr, localEnv;

      // Defining browser viewport
      await bs.page.setViewport({
        width: 1920,
        height: 1080,
        deviceScaleFactor: 1,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
  

      // Navigating to http://todomvc.com/examples/react/#/
      bs.performance.reset();
      await bs.page.goto( "http://todomvc.com/examples/react/#/", {"timeout":30000,"waitUntil":"load"} );
    
      
      
      // Waiting for the target
      await bs.page.waitForSelector( " .todoapp .header", {"timeout":30000,"visible":false,"hidden":false} );
      
      // Asserting that HEADER element is visible
      result = await bs.target( await bs.getTargetOrFalse("HEADER") ).isVisible();       
      expect( result ).toBeVisible( {"assertion":"visible","availability":"visible","display":"any","visibility":"any","opacity":"any","isIntersecting":"any"}, "HEADER.assertVisible" );
      
      // Asserting that FOOTER element is visible
      result = await bs.target( await bs.getTargetOrFalse("FOOTER") ).isVisible();       
      expect( result ).toBeVisible( {"assertion":"visible","value":false,"display":"any","visibility":"any","opacity":"any","isIntersecting":true}, "FOOTER.assertVisible" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ekc6mp", null, "#1 Only header visible" ) );

    });


    test( "New todo {gask2ab771w}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp .header input.new-todo" );
      
      // Emulating user input
      await ( await bs.getTarget( "NEWTODO_INPUT" ) ).type( "Test Puppetry 3.0.0     " );
      
      
      // Emulate key press
      
      await bs.page.keyboard.press( "Enter" );
      
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .todo-list > li:nth-child(1) .view > label" );
      
      // Asserting that HTML content of the focused element satisfies the given constraint
      result = await bs.target( await bs.getTarget( "TODO_LIST_LI1_LABEL" ) ).getProp( "innerHTML" );       
      expect( result ).toBeEqual( "Test Puppetry 3.0.0", "TODO_LIST_LI1_LABEL.assertHtml" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .footer .todo-count > strong" );
      
      // Asserting that HTML content of the focused element satisfies the given constraint
      result = await bs.target( await bs.getTarget( "TODO_COUNT" ) ).getProp( "innerHTML" );       
      expect( result ).toBeEqual( "1", "TODO_COUNT.assertHtml" );

      // Taking screenshot of the page
      await bs.traceTarget( "mdyk2eoaghi",
        {
          "HEADER": async () =>  await bs.getTargetOrFalse("HEADER"),
          "MAIN": async () =>  await bs.getTargetOrFalse("MAIN"),
          "FOOTER": async () =>  await bs.getTargetOrFalse("FOOTER")
        },
        async() => {
          await bs.page.screenshot( util.png( "mdyk2eoaghi", null, "#1 Item added" ) );
        });

    });


    test( "Mark all as complete {6kgk2bmpt6t}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp .header input.new-todo" );
      
      // Emulating user input
      await ( await bs.getTarget( "NEWTODO_INPUT" ) ).type( "Update Puppetry docs" );
      
      
      // Emulate key press
      
      await bs.page.keyboard.press( "Enter" );
      
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp label[for=\"toggle-all\"]" );

      // Emulating mouse click
      await ( await bs.getTarget( "TOGGLE_ALL" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp label[for=\"toggle-all\"]" );
      
      // Asserting that "color" CSS property's value of TOGGLE_ALL satisfies the given constraint
      result = await bs.page.$eval( ' .todoapp label[for="toggle-all"]',
        ( el, prop, pseudoEl ) => window.getComputedStyle( el, pseudoEl || null )
        .getPropertyValue( prop ), "color", ":before" );       
      expect( result ).toBeEqual( "rgb(115, 115, 115)", "TOGGLE_ALL.assertStyle" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "mdyk2eobf5i", null, "#1 Both items checked on, Toggle All is activve" ) );


      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_TOGGLE" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp label[for=\"toggle-all\"]" );
      
      // Asserting that "color" CSS property's value of TOGGLE_ALL satisfies the given constraint
      result = await bs.page.$eval( ' .todoapp label[for="toggle-all"]',
        ( el, prop, pseudoEl ) => window.getComputedStyle( el, pseudoEl || null )
        .getPropertyValue( prop ), "color", ":before" );       
      expect( result ).toBeEqual( "rgb(230, 230, 230)", "TOGGLE_ALL.assertStyle" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "mdyk2eod3rs", null, "#2 Not all of items checked on, Toggle All is inactive" ) );


      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_TOGGLE" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp label[for=\"toggle-all\"]" );
      
      // Asserting that "color" CSS property's value of TOGGLE_ALL satisfies the given constraint
      result = await bs.page.$eval( ' .todoapp label[for="toggle-all"]',
        ( el, prop, pseudoEl ) => window.getComputedStyle( el, pseudoEl || null )
        .getPropertyValue( prop ), "color", ":before" );       
      expect( result ).toBeEqual( "rgb(115, 115, 115)", "TOGGLE_ALL.assertStyle" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "mdyk2eoekcn", null, "#3 Both items checked on, Toggle All is active" ) );

    });


    test( "Item {87ak2bpo1fm}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp label[for=\"toggle-all\"]" );

      // Emulating mouse click
      await ( await bs.getTarget( "TOGGLE_ALL" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_TOGGLE" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .todo-list > li:nth-child(1) .view > label" );
      
      // Asserting that "text-decoration" CSS property's value of TODO_LIST_LI1_LABEL satisfies the given constraint
      result = await bs.page.$eval( '.todoapp .todo-list > li:nth-child(1) .view > label',
        ( el, prop, pseudoEl ) => window.getComputedStyle( el, pseudoEl || null )
        .getPropertyValue( prop ), "text-decoration", null );       
      expect( result ).toIncludeSubstring( "line-through", "TODO_LIST_LI1_LABEL.assertStyle" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "mdyk2eof3rl", null, "#1 One item checked on" ) );

      
      // Emulating element hover
      await ( await bs.getTarget( "TODO_LIST_LI1_LABEL" ) ).hover();
      
      // Asserting that TODO_LIST_LI1_REMOVE element is visible
      result = await bs.target( await bs.getTargetOrFalse("TODO_LIST_LI1_REMOVE") ).isVisible();       
      expect( result ).toBeVisible( {"assertion":"visible","value":true,"display":"any","visibility":"any","opacity":"any","isIntersecting":true}, "TODO_LIST_LI1_REMOVE.assertVisible" );
    });


    test( "Editing {9ick2bre8bz}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .todo-list > li:nth-child(1) .view > label" );

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_LABEL" ) ).click( {"button":"left","clickCount":2,"delay":0} );
      
      // Asserting that TODO_LIST_LI1_VIEW element is visible
      result = await bs.target( await bs.getTargetOrFalse("TODO_LIST_LI1_VIEW") ).isVisible();       
      expect( result ).toBeVisible( {"assertion":"visible","value":true,"display":"none","visibility":"any","opacity":"any","isIntersecting":false}, "TODO_LIST_LI1_VIEW.assertVisible" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "mdyk2eofyaq", null, "#1 Item in editing mode" ) );

      
      // Reset the input or form
      await bs.page.$eval( '.todoapp .todo-list > li:nth-child(1) input.edit', el => {
        if ( el.tagName === "FORM" ) {
          el.reset();
          return;
        }
        if ( "value" in el ) {
          el.value = "";
        }
      });
      
      // Emulating user input
      await ( await bs.getTarget( "TODO_LIST_LI1_EDIT" ) ).type( "Re-test Puppetry" );
      
      
      // Emulate key press
      
      await bs.page.keyboard.press( "Enter" );
      
      
      // Asserting that HTML content of the focused element satisfies the given constraint
      result = await bs.target( await bs.getTarget( "TODO_LIST_LI1_LABEL" ) ).getProp( "innerHTML" );       
      expect( result ).toBeEqual( "Re-test Puppetry", "TODO_LIST_LI1_LABEL.assertHtml" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "mdyk2eogh5h", null, "#2 Item is saved by Enter" ) );

      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .todo-list > li:nth-child(1) .view > label" );

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_LABEL" ) ).click( {"button":"left","clickCount":2,"delay":0} );
      
      // Reset the input or form
      await bs.page.$eval( '.todoapp .todo-list > li:nth-child(1) input.edit', el => {
        if ( el.tagName === "FORM" ) {
          el.reset();
          return;
        }
        if ( "value" in el ) {
          el.value = "";
        }
      });
      
      // Emulating user input
      await ( await bs.getTarget( "TODO_LIST_LI1_EDIT" ) ).type( "Re-re-test Puppetry" );

      // Emulating mouse click at x=10, y=10
      await bs.page.mouse.click( 10, 10, {"button":"left","clickCount":1,"delay":0} );
      
      // Asserting that HTML content of the focused element satisfies the given constraint
      result = await bs.target( await bs.getTarget( "TODO_LIST_LI1_LABEL" ) ).getProp( "innerHTML" );       
      expect( result ).toBeEqual( "Re-re-test Puppetry", "TODO_LIST_LI1_LABEL.assertHtml" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "b8tk2eilxl9", null, "#3 Item is saved by blur" ) );

    });


    test( "Clear completed button {ajkk2bsfcw4}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    
      
      // Asserting that number of elements matching ".todoapp .todo-list > li" satisfies the given constraint
      result = ( await bs.page.$$(".todoapp .todo-list > li") ).length;       
      expect( result ).toPassCondition( "eq", 2, "number of the matching elements", "page.assertNodeCount" );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "72sk2eiu421", null, "#1 Two items, one uncompleted" ) );


      // Emulating mouse click
      await ( await bs.getTarget( "CLEAR_COMPLETED" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "72sk2eix6x2", null, "#2 One item" ) );

      
      // Asserting that number of elements matching ".todoapp .todo-list > li" satisfies the given constraint
      result = ( await bs.page.$$(".todoapp .todo-list > li") ).length;       
      expect( result ).toPassCondition( "eq", 1, "number of the matching elements", "page.assertNodeCount" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .footer .todo-count > strong" );
      
      // Asserting that HTML content of the focused element satisfies the given constraint
      result = await bs.target( await bs.getTarget( "TODO_COUNT" ) ).getProp( "innerHTML" );       
      expect( result ).toBeEqual( "1", "TODO_COUNT.assertHtml" );

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_TOGGLE" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .footer button.clear-completed" );

      // Emulating mouse click
      await ( await bs.getTarget( "CLEAR_COMPLETED" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "72sk2eiym39", null, "#3 No items" ) );

      
      // Asserting that FOOTER element is visible
      result = await bs.target( await bs.getTargetOrFalse("FOOTER") ).isVisible();       
      expect( result ).toBeVisible( {"assertion":"visible","value":false,"display":"any","visibility":"any","opacity":"any","isIntersecting":true}, "FOOTER.assertVisible" );
    });


    test( "Counter {72sk2ej2vb9}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejdy1u", null, "#1 No items" ) );

      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp .header input.new-todo" );
      
      // Emulating user input
      await ( await bs.getTarget( "NEWTODO_INPUT" ) ).type( "Test Puppetry 3.0.0     " );
      
      
      // Emulate key press
      
      await bs.page.keyboard.press( "Enter" );
      
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp .header input.new-todo" );
      
      // Emulating user input
      await ( await bs.getTarget( "NEWTODO_INPUT" ) ).type( "Re-test Puppetry 3.0.0     " );
      
      
      // Emulate key press
      
      await bs.page.keyboard.press( "Enter" );
      
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( " .todoapp .header input.new-todo" );
      
      // Emulating user input
      await ( await bs.getTarget( "NEWTODO_INPUT" ) ).type( "Re-re-test Puppetry 3.0.0     " );
      
      
      // Emulate key press
      
      await bs.page.keyboard.press( "Enter" );
      

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejfcwb", null, "#2 Three items" ) );

      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( ".todoapp .footer .todo-count > strong" );
      
      // Asserting that HTML content of the focused element satisfies the given constraint
      result = await bs.target( await bs.getTarget( "TODO_COUNT" ) ).getProp( "innerHTML" );       
      expect( result ).toBeEqual( "3", "TODO_COUNT.assertHtml" );
    });


    test( "Filtering {7esk2ejj5n9}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejl7wc", null, "#1 Three items, all uncompleted" ) );


      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_TOGGLE" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejn2vm", null, "#2 Two items uncompleted and one completed" ) );

      
      // Asserting that number of elements matching ".todoapp .todo-list > li" satisfies the given constraint
      result = ( await bs.page.$$(".todoapp .todo-list > li") ).length;       
      expect( result ).toPassCondition( "eq", 3, "number of the matching elements", "page.assertNodeCount" );

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_FILTER_ACTIVE" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejr2q5", null, "#3 Only uncompleted in the list" ) );

      
      // Asserting that number of elements matching ".todoapp .todo-list > li" satisfies the given constraint
      result = ( await bs.page.$$(".todoapp .todo-list > li") ).length;       
      expect( result ).toPassCondition( "eq", 2, "number of the matching elements", "page.assertNodeCount" );

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_FILTER_COMPLETED" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejsaac", null, "#4 Only completed in the list" ) );

      
      // Asserting that number of elements matching ".todoapp .todo-list > li" satisfies the given constraint
      result = ( await bs.page.$$(".todoapp .todo-list > li") ).length;       
      expect( result ).toPassCondition( "eq", 1, "number of the matching elements", "page.assertNodeCount" );
    });


    test( "Removing {7esk2ejsva9}", async () => {
      let result, assert, searchStr, localEnv;

      // Referesh the page
      await bs.page.reload( {"timeout":30000,"waitUntil":"load"} );
    
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "  .todoapp .footer .filters > li:nth-of-type(1) > a" );

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_FILTER_ALL" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejv3z6", null, "#1 Three items" ) );

      
      // Emulating element hover
      await ( await bs.getTarget( "TODO_LIST_LI1_LABEL" ) ).hover();

      // Emulating mouse click
      await ( await bs.getTarget( "TODO_LIST_LI1_REMOVE" ) ).click( {"button":"left","clickCount":1,"delay":0} );

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "7esk2ejxmo1", null, "#2 Two items after removing" ) );

      
      // Asserting that number of elements matching ".todoapp .todo-list > li" satisfies the given constraint
      result = ( await bs.page.$$(".todoapp .todo-list > li") ).length;       
      expect( result ).toPassCondition( "eq", 2, "number of the matching elements", "page.assertNodeCount" );
    });

  });


});
