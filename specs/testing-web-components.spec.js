
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Sun Nov 20 2022 21:39:20 GMT+0900 (日本標準時)
 * Suite: Shadow Dom
 */

var nVer = process.version.match( /^v(\d+)/ );
if ( !nVer || nVer[ 1 ] < 9 ) {
  console.error( "WARNING: You have an outdated Node.js version " + process.version
    + ". You need at least v.9.x to run this test suite." );
}


const {
        bs, util, fetch, localStorage
      } = require( "../lib/bootstrap" )( "Shadow--Dom" ),
      puppeteerOptions = require( "../puppeteer.config.json" ),
      devices = require( "puppeteer" ).devices,
      fs = require( "fs" ),
      path = require( "path" ),
      os = require( "os" );




jest.setTimeout( 50000 );

let consoleLog = [], // assetConsoleMessage
    dialogLog = []; // assertDialog;

bs.TARGETS = {};

// Environment variables
let ENV = {
  "SANDBOX_BASEURL": "https://puppetry.app/demo/"
};

bs.TARGETS[ "FIRSTNAME_INPUT" ] = async () => await bs.query( "#fname", true, "FIRSTNAME_INPUT" );
bs.TARGETS[ "LASTNAME_INPUT" ] = async () => await bs.query( "#lname", true, "LASTNAME_INPUT" );
bs.TARGETS[ "MESSAGE_INPUT" ] = async () => await bs.query( "#comment", true, "MESSAGE_INPUT" );
bs.TARGETS[ "CONSENT_CHECKBOX" ] = async () => await bs.query( "#consent", true, "CONSENT_CHECKBOX" );
bs.TARGETS[ "OPTION_RADIO_1" ] = async () => await bs.query( "#option1", true, "OPTION_RADIO_1" );
bs.TARGETS[ "ATTACHMENT_FILE" ] = async () => await bs.query( "#attachment", true, "ATTACHMENT_FILE" );
bs.TARGETS[ "FORM" ] = async () => await bs.query( "#form", true, "FORM" );
bs.TARGETS[ "SUBMIT_BTN" ] = async () => await bs.query( "#submit", true, "SUBMIT_BTN" );
bs.TARGETS[ "LOCAL_RADIOBOX" ] = async () => bs.tryLocalTarget( `LOCAL_RADIOBOX`, async () => await bs.page.evaluateHandle('document.querySelector( "#starRating" ).shadowRoot.querySelector( "#r5" )') );
bs.TARGETS[ "LOCAL_LABEL" ] = async () => bs.tryLocalTarget( `LOCAL_LABEL`, async () => await bs.page.evaluateHandle('document.querySelector( "#starRating" ).shadowRoot.querySelector( "label[for=r5]" )') );
bs.TARGETS[ "SHADOW_HOST" ] = async () => await bs.query( "#starRating", true, "SHADOW_HOST" );

describe( "Shadow Dom", () => {
  beforeAll(async () => {
    await bs.setup( puppeteerOptions, {"allure":false,"requireInterceptTraffic":true});
    await util.once(async () => {
      bs.browser && console.log( "BROWSER: ", await bs.browser.version() );
      await util.savePuppetterInfo( bs );
    });

    bs.page.on( "console", ( message ) => consoleLog.push( message ) );
    bs.page.on( "dialog", ( dialog ) => dialogLog.push( dialog ) );

    
    bs.performance.watchTraffic();

    
  });

  afterAll(async () => {

    await bs.teardown();
  });


  describe( "Check querying in Shadow DOM", () => {

    test( "Type in local input {egmk168h7zs}", async () => {
      let result, assert, searchStr, localEnv;

      // Defining browser viewport
      await bs.page.setViewport({
        width: 1980,
        height: 1080,
        deviceScaleFactor: 1,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
  

      // Navigating to {{ SANDBOX_BASEURL }}
      bs.performance.reset();
      await bs.page.goto( `${ ENV[ "SANDBOX_BASEURL" ] }`, {"timeout":30000,"waitUntil":"load"} );
    

      // Emulating mouse click
      await ( await bs.getTarget( "LOCAL_LABEL" ) ).click( {"button":"left","clickCount":1,"delay":0} );
      
      // Asserting that "checked" property's value of LOCAL_RADIOBOX satisfies the given constraint
      result = await bs.target( await bs.getTarget( "LOCAL_RADIOBOX" ) ).getProp( "checked" );       
      expect( result ).toHavePropertyTrue( "checked", "LOCAL_RADIOBOX.assertProperty" );

      // Taking screenshot of SHADOW_HOST element
      await ( await bs.getTarget( "SHADOW_HOST" ) ).screenshot( util.png( "egmk168m5l8", null, "Shadow host", {"omitBackground":false} ) );
  

      // Taking screenshot of the page
      await bs.page.screenshot( util.png( "hbfk2gb85at", null, "Entire page", {"fullPage":true,"omitBackground":false} ) );

    });

  });


});
